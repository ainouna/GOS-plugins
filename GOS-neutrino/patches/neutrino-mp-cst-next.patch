diff -Naur -X ../exclude.pats neutrino-mp-cst-next.org/src/driver/fbaccel.cpp neutrino-mp-cst-next/src/driver/fbaccel.cpp
--- neutrino-mp-cst-next.org/src/driver/fbaccel.cpp	2015-04-24 06:50:43.495868656 +0200
+++ neutrino-mp-cst-next/src/driver/fbaccel.cpp	2015-04-24 08:09:29.227789652 +0200
@@ -210,11 +210,32 @@
 	}
 	backbuf_sz = 1280 * 720 * sizeof(fb_pixel_t);
 	BPAMemAllocMemData bpa_data;
+		char buf[64];
+	
+	//j00zek dynmiczna definicja partcji bpa
+	int len = -1;
+	int fd = open("/proc/stb/info/model", O_RDONLY);
+	bpa_data.bpa_part = (char *)"LMI_VID";
+	if (fd != -1) {
+		len = read(fd, buf, sizeof(buf) - 1);
+		close(fd);
+	}
+	if (len > 0) {
+		buf[len] = 0;
+		if  (/*(!strncmp(buf, "arivalink200", 12)) || */
+			(!strncmp(buf, "cuberevo", 8)) ||
+			(!strncmp(buf, "octagon1008", 11)) ||
+			(!strncmp(buf, "ipbox", 5))
+		) 
+			bpa_data.bpa_part = (char *)"LMI_SYS";
+	}
+#if 0
 #if BOXMODEL_OCTAGON1008 || BOXMODEL_FORTIS_HDBOX || BOXMODEL_CUBEREVO || BOXMODEL_CUBEREVO_MINI || BOXMODEL_CUBEREVO_MINI2 || BOXMODEL_CUBEREVO_250HD || BOXMODEL_CUBEREVO_2000HD || BOXMODEL_IPBOX9900 || BOXMODEL_IPBOX99 || BOXMODEL_IPBOX55 || BOXMODEL_TF7700
 	bpa_data.bpa_part = (char *)"LMI_SYS";
 #else
 	bpa_data.bpa_part = (char *)"LMI_VID";
 #endif
+#endif
 	bpa_data.mem_size = backbuf_sz;
 	int res;
 	res = ioctl(bpafd, BPAMEMIO_ALLOCMEM, &bpa_data);
diff -Naur -X ../exclude.pats neutrino-mp-cst-next.org/src/driver/vfd.cpp neutrino-mp-cst-next/src/driver/vfd.cpp
--- neutrino-mp-cst-next.org/src/driver/vfd.cpp	2015-04-13 08:51:01.554177537 +0200
+++ neutrino-mp-cst-next/src/driver/vfd.cpp	2015-04-24 08:09:29.235789652 +0200
@@ -52,6 +52,7 @@
 #include <stropts.h>
 #define VFD_DEVICE "/dev/vfd"
 
+#if 0
 #if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
 #define VFDLENGTH 8
 #elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
@@ -65,6 +66,9 @@
 #else
 #define VFDLENGTH 16
 #endif
+#else
+static int VFDLENGTH = 99; //99 as init value and trigger to check
+#endif
 
 #define SCROLL_TIME 100000
 
@@ -83,8 +87,40 @@
 	unsigned char length;
 };
 
+static int get_vfd_length()
+{
+	char buf[64];
+	int len = -1;
+	int fd = open("/var/grun/grcstype", O_RDONLY);
+	if (fd != -1) {
+		len = read(fd, buf, sizeof(buf) - 1);
+		close(fd);
+	}
+	if (len > 0) {
+		dprintf(4,"[grcstype] read file:\n%s\n", buf);
+		buf[len] = 0;
+		char *p = strstr(buf, "vfdsize=");
+		int h0;
+		if (p && sscanf(p, "vfdsize=%d", &h0) == 1) {
+			printf("FOUND vfdsize=%d\n", h0);
+			return h0;
+		}
+		else 
+			return 4;
+	}
+	else {
+		printf ("[grcstype] file not read");
+		return 4;
+	}
+}
+
 static void write_to_vfd(unsigned int DevType, struct vfd_ioctl_data * data, bool force = false)
 {
+	if ( VFDLENGTH == 99 )
+		VFDLENGTH = get_vfd_length();
+	else if ( VFDLENGTH == 0 )
+		return;
+
 	int file_closed = 0;
 	if (blocked) {
 		if (file_vfd > -1) {
@@ -138,6 +174,11 @@
 
 static void ShowNormalText(char * str, bool fromScrollThread = false)
 {
+	if (VFDLENGTH == 0)
+	{
+		printf("[CVFD] ShowNormalText:VFDLENGTH=0 exiting\n");
+		return;
+	}
 	if (blocked)
 	{
 		printf("[CVFD] - blocked\n");
@@ -163,11 +204,15 @@
 		return;
 	}
 
+#if 0 //Let's always start from begining, like in openPLI
 	if (strlen(str) < VFDLENGTH && VFDLENGTH > 7) // do not center on small displays
 		ws = (VFDLENGTH-strlen(str))/2;
 	else
 		ws = 0;
-	memset(data.data, ' ', 63);
+#else
+		ws = 0;
+#endif		
+		memset(data.data, ' ', 63);
 	if (!fromScrollThread)
 	{
 		memcpy (data.data+ws, str, VFDLENGTH-ws);
@@ -1203,6 +1248,8 @@
 	ShowText("              ");
 #elif !defined (BOXMODEL_HS7110)
 	ShowText("                ");
+#else
+	ShowText("                ");
 #endif
 #endif
 }
diff -Naur -X ../exclude.pats neutrino-mp-cst-next.org/src/gui/channellist.cpp neutrino-mp-cst-next/src/gui/channellist.cpp
--- neutrino-mp-cst-next.org/src/gui/channellist.cpp	2015-04-24 06:50:43.511868655 +0200
+++ neutrino-mp-cst-next/src/gui/channellist.cpp	2015-04-24 09:43:26.779695405 +0200
@@ -91,6 +91,9 @@
 
 static CComponentsFrmClock *headerClock = NULL;
 static int headerClockWidth = 0;
+static int PIGwidth = 480; //435;
+static int PIGheight = 270; //245;
+static int NextEventsHeight = 0; //j00zek, contains where info about next events should start
 extern bool timeset;
 
 CChannelList::CChannelList(const char * const pName, bool phistoryMode, bool _vlist)
@@ -437,7 +440,7 @@
 int CChannelList::exec()
 {
 	displayNext = 0; // always start with current events
-	displayList = 1; // always start with event list
+	displayList = 0; //j00zek oways with EPG 1; // always start with event list
 	int nNewChannel = show();
 	if ( nNewChannel > -1 && nNewChannel < (int) (*chanlist).size()) {
 		if(this->historyMode && (*chanlist)[nNewChannel]) {
@@ -469,7 +472,7 @@
 	full_width = pig_on_win ? (frameBuffer->getScreenWidth()-2*ConnectLineBox_Width) : frameBuffer->getScreenWidthRel();
 
 	if (g_settings.channellist_additional)
-		width = full_width / 3 * 2;
+		width = full_width - PIGwidth; // j00zek / 3 * 2;
 	else
 		width = full_width;
 
@@ -504,10 +507,11 @@
 	y = getScreenStartY(height + info_height);
 
 	// calculate width/height of right info_zone and pip-box
-	infozone_width = full_width - width;
+	//infozone_width = full_width - width;
+	infozone_width = PIGwidth;
 	pig_width = infozone_width;
 	if ( pig_on_win /* with miniTV */ )
-		pig_height = (pig_width * 9) / 16;
+		pig_height = PIGheight; //(pig_width * 9) / 16; j00zek, let's use fixed (working size)
 	else
 		pig_height = 0;
 	infozone_height = height - theight - pig_height - footerHeight;
@@ -730,7 +734,7 @@
 		}
 		else if (!empty && (msg == CRCInput::RC_up || (int) msg == g_settings.key_pageup))
 		{
-			displayList = 1;
+			// j00zek displayList = 1;
 			int step = ((int) msg == g_settings.key_pageup) ? listmaxshow : 1;  // browse or step 1
 			int new_selected = selected - step;
 			if (new_selected < 0) {
@@ -743,7 +747,7 @@
 		}
 		else if (!empty && (msg == CRCInput::RC_down || (int) msg == g_settings.key_pagedown))
 		{
-			displayList = 1;
+			// j00zek displayList = 1;
 			int step =  ((int) msg == g_settings.key_pagedown) ? listmaxshow : 1;  // browse or step 1
 			int new_selected = selected + step;
 			if (new_selected >= (int) (*chanlist).size()) {
@@ -780,8 +784,18 @@
 					oldselected = selected;
 					paintBody(); // refresh zapped vs selected
 				} else if(SameTP()) {
-					zapOnExit = true;
-					loop=false;
+					if ((new_zap_mode = 1) && (oldselected != selected)) {
+						printf("RC_OK & SameTP & new_zap_mode = 1");
+						zapTo(selected);
+						actzap = true;
+						oldselected = selected;
+						paintBody(); // refresh zapped vs selected
+					}
+					else
+					{
+						zapOnExit = true;
+						loop=false;
+					}
 				}
 			}
 		}
@@ -1689,8 +1703,15 @@
 	{
 		if (displayList)
 			paint_events(index);
-		else
+		else {
 			showdescription(selected);
+			//printf("# j00zek, disabled footer, NextEventsHeight=%d\n",NextEventsHeight);
+			if (NextEventsHeight > 0) {
+				frameBuffer->paintBoxRel(x+ width,y+ theight+pig_height+NextEventsHeight+1, infozone_width, 2,COL_MENUCONTENT_PLUS_3);//j00zek, kolor slidera
+				NextEventsHeight += 4;
+			}
+			paint_events(index);
+		}
 	}
 }
 
@@ -1928,12 +1949,12 @@
 		frameBuffer->getIconSize(icon, &s_icon_w, &s_icon_h);
 		r_icon_w = ChannelList_Rec;
 		int r_icon_x = icon_x;
-
+/* j00zek we don't paint scrambled icons
 		//paint icon
 		if(chan->scrambled || isWebTV)
 			if (frameBuffer->paintIcon(icon, icon_x - s_icon_w, ypos, fheight))//ypos + (fheight - 16)/2);
 				r_icon_x = r_icon_x - s_icon_w;
-
+*/
 		//paint HD Icon
 		if(chan->isHD() && g_settings.channellist_hdicon) {
 			frameBuffer->getIconSize(NEUTRINO_ICON_RESOLUTION_HD, &h_icon_w, &s_icon_h);
@@ -2266,7 +2287,17 @@
 {
 	ffheight = g_Font[eventFont]->getHeight();
 	readEvents((*chanlist)[index]->channel_id);
-	frameBuffer->paintBoxRel(x+ width,y+ theight+pig_height, infozone_width, infozone_height,COL_MENUCONTENT_PLUS_0);
+	int firstRowY=0;
+	int nextRowsY=0;
+	if (NextEventsHeight > 0) {
+		firstRowY=NextEventsHeight;//j00zek przesuniecie pierwszej linii w trybie epg z programami
+		nextRowsY=ffheight;//j00zek przesuniecie nastepnych linii w trybie epg z programami
+	}
+	
+	if (infozone_width-firstRowY < ffheight)
+		return;
+	
+	frameBuffer->paintBoxRel(x+ width,y+ theight+pig_height+firstRowY, infozone_width, infozone_height - firstRowY,COL_MENUCONTENT_PLUS_0); //j00zek
 
 	char startTime[10];
 	int eventStartTimeWidth = 4 * g_Font[eventFont]->getMaxDigitWidth() + g_Font[eventFont]->getRenderWidth(":") + 5; // use a fixed value
@@ -2305,21 +2336,27 @@
 			break;
 
 		//Display the remaining events
-		if ((y+ theight+ pig_height + i*ffheight) < (y+ theight+ pig_height + infozone_height))
+		if ((y+ theight+ pig_height + i*ffheight) < (y+ theight+ pig_height + infozone_height - firstRowY + nextRowsY)) //j00zek w trybie epg wyswietlamy pierwsza pozycje przed epg, dopiero reszta jest po
 		{
+			bool first = (i == 1);
 			fb_pixel_t color = COL_MENUCONTENTDARK_TEXT;
 			if (e->eventID)
 			{
-				bool first = (i == 1);
 				if ((first && g_settings.theme.colored_events_channellist == 1 /* current */) || (!first && g_settings.theme.colored_events_channellist == 2 /* next */))
 					color = COL_COLORED_EVENTS_TEXT;
 				struct tm *tmStartZeit = localtime(&e->startTime);
 				strftime(startTime, sizeof(startTime), "%H:%M", tmStartZeit );
 				//printf("%s %s\n", startTime, e->description.c_str());
 				startTimeWidth = eventStartTimeWidth;
-				g_Font[eventFont]->RenderString(x+ width+5, y+ theight+ pig_height + i*ffheight, startTimeWidth, startTime, color);
+				if (first)
+					g_Font[eventFont]->RenderString(x+ width+5, y+ theight + pig_height + i*ffheight, startTimeWidth, startTime, color);
+				else
+					g_Font[eventFont]->RenderString(x+ width+5, y+ theight + pig_height + firstRowY - nextRowsY + i*ffheight, startTimeWidth, startTime, color);
 			}
-			g_Font[eventFont]->RenderString(x+ width+5+startTimeWidth, y+ theight+ pig_height + i*ffheight, infozone_width - startTimeWidth - 20, e->description, color);
+			if (first)
+				g_Font[eventFont]->RenderString(x+ width+5+startTimeWidth, y+ theight+ pig_height + i*ffheight, infozone_width - startTimeWidth - 20, e->description, color);
+			else
+				g_Font[eventFont]->RenderString(x+ width+5+startTimeWidth, y+ theight+ pig_height + firstRowY - nextRowsY + i*ffheight, infozone_width - startTimeWidth - 20, e->description, color);
 		}
 		else
 		{
@@ -2368,8 +2405,10 @@
 		processTextToArray(g_Locale->getText(LOCALE_EPGVIEWER_NODETAILED));
 
 	frameBuffer->paintBoxRel(x+ width,y+ theight+pig_height, infozone_width, infozone_height,COL_MENUCONTENT_PLUS_0);
-	for (int i = 1; (i < (int)epgText.size()+1) && ((y+ theight+ pig_height + i*ffheight) < (y+ theight+ pig_height + infozone_height)); i++)
+	for (int i = 2; (i < (int)epgText.size()+1) && ((y+ theight+ pig_height + i*ffheight) < (y+ theight+ pig_height + infozone_height - 2*ffheight)); i++) {
 		g_Font[eventFont]->RenderString(x+ width+5, y+ theight+ pig_height + i*ffheight, infozone_width - 20, epgText[i-1].first, COL_MENUCONTENTDARK_TEXT);
+		NextEventsHeight = i*ffheight;
+	}
 }
 
 void CChannelList::addTextToArray(const std::string & text, int screening) // UTF-8
diff -Naur -X ../exclude.pats neutrino-mp-cst-next.org/src/gui/opkg_manager.cpp neutrino-mp-cst-next/src/gui/opkg_manager.cpp
--- neutrino-mp-cst-next.org/src/gui/opkg_manager.cpp	2015-03-30 15:53:23.916069483 +0200
+++ neutrino-mp-cst-next/src/gui/opkg_manager.cpp	2015-04-24 08:09:29.239789652 +0200
@@ -269,7 +269,7 @@
 
 bool COPKGManager::hasOpkgSupport()
 {
-	string deps[] = {"/etc/opkg/opkg.conf", "/var/lib/opkg", ""};
+	string deps[] = {"/etc/opkg/opkg.conf", "/var/opkg", ""};
 
 	if (find_executable(OPKG_CL).empty()) {
 		dprintf(DEBUG_INFO, "[neutrino opkg] did not find " OPKG_CL " executable\n");
diff -Naur -X ../exclude.pats neutrino-mp-cst-next.org/src/neutrino.cpp neutrino-mp-cst-next/src/neutrino.cpp
--- neutrino-mp-cst-next.org/src/neutrino.cpp	2015-04-24 06:50:43.519868655 +0200
+++ neutrino-mp-cst-next/src/neutrino.cpp	2015-04-24 11:38:02.943580451 +0200
@@ -500,7 +500,7 @@
 	g_settings.backlight_tv = configfile.getInt32( "backlight_tv", 1);
 	g_settings.backlight_standby = configfile.getInt32( "backlight_standby", 0);
 	g_settings.backlight_deepstandby = configfile.getInt32( "backlight_deepstandby", 0);
-	g_settings.lcd_scroll = configfile.getInt32( "lcd_scroll", 1);
+	g_settings.lcd_scroll = configfile.getInt32( "lcd_scroll", 0);
 
 	g_settings.hdd_fs = configfile.getInt32( "hdd_fs", 0);
 	g_settings.hdd_sleep = configfile.getInt32( "hdd_sleep", 0);
@@ -581,11 +581,11 @@
 	g_settings.epg_extendedcache    = configfile.getInt32("epg_extendedcache_time", 360);
 	g_settings.epg_old_events       = configfile.getInt32("epg_old_events", 1);
 	g_settings.epg_max_events       = configfile.getInt32("epg_max_events", 30000);
-	g_settings.epg_dir              = configfile.getString("epg_dir", "/media/sda1/epg");
+	g_settings.epg_dir              = configfile.getString("epg_dir", "/hdd/epg");
 	// NTP-Server for sectionsd
 	g_settings.network_ntpserver    = configfile.getString("network_ntpserver", "time.fu-berlin.de");
 	g_settings.network_ntprefresh   = configfile.getString("network_ntprefresh", "30" );
-	g_settings.network_ntpenable    = configfile.getBool("network_ntpenable", false);
+	g_settings.network_ntpenable    = configfile.getBool("network_ntpenable", true);
 
 	g_settings.ifname = configfile.getString("ifname", "eth0");
 
@@ -783,13 +783,13 @@
 	g_settings.eventlist_additional = configfile.getInt32("eventlist_additional", 0);
 	g_settings.channellist_epgtext_align_right	= configfile.getBool("channellist_epgtext_align_right"          , false);
 	g_settings.channellist_progressbar_design = configfile.getInt32("channellist_progressbar_design", g_settings.progressbar_design);
-	g_settings.channellist_foot	= configfile.getInt32("channellist_foot"          , 1);//default next Event
+	g_settings.channellist_foot	= configfile.getInt32("channellist_foot"          , 2);//j00zek, default off
 	g_settings.channellist_new_zap_mode = configfile.getInt32("channellist_new_zap_mode", 1);
 	g_settings.channellist_hdicon = configfile.getInt32("channellist_hdicon", 0); //default off
 	g_settings.channellist_sort_mode  = configfile.getInt32("channellist_sort_mode", 0);//sort mode: alpha, freq, sat
 	g_settings.channellist_numeric_adjust  = configfile.getInt32("channellist_numeric_adjust", 0);
 	g_settings.channellist_show_channellogo = configfile.getInt32("channellist_show_channellogo", 1);
-	g_settings.channellist_show_infobox = configfile.getInt32("channellist_show_infobox", 1);
+	g_settings.channellist_show_infobox = configfile.getInt32("channellist_show_infobox", 0);
 	g_settings.channellist_show_numbers = configfile.getInt32("channellist_show_numbers", 1);
 
 	//screen configuration
